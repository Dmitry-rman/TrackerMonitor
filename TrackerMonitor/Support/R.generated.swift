//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DeviceCellID`.
    static let deviceCellID: Rswift.ReuseIdentifier<DeviceCell> = Rswift.ReuseIdentifier(identifier: "DeviceCellID")
    /// Reuse identifier `TitleSubtitleCell`.
    static let titleSubtitleCell: Rswift.ReuseIdentifier<TitleSubtitleCell> = Rswift.ReuseIdentifier(identifier: "TitleSubtitleCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainViewController
      
      let aboutViewController = StoryboardViewControllerResource<AboutViewController>(identifier: "AboutViewController")
      let addDeviceViewController = StoryboardViewControllerResource<AddDeviceViewController>(identifier: "AddDeviceViewController")
      let bundle = R.hostingBundle
      let deviceListViewController = StoryboardViewControllerResource<DeviceListViewController>(identifier: "DeviceListViewController")
      let deviceViewController = StoryboardViewControllerResource<DeviceViewController>(identifier: "DeviceViewController")
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"
      
      func aboutViewController(_: Void = ()) -> AboutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutViewController)
      }
      
      func addDeviceViewController(_: Void = ()) -> AddDeviceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addDeviceViewController)
      }
      
      func deviceListViewController(_: Void = ()) -> DeviceListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deviceListViewController)
      }
      
      func deviceViewController(_: Void = ()) -> DeviceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deviceViewController)
      }
      
      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'info' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "list.bullet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'list.bullet' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().aboutViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutViewController' could not be loaded from storyboard 'Main' as 'AboutViewController'.") }
        if _R.storyboard.main().addDeviceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addDeviceViewController' could not be loaded from storyboard 'Main' as 'AddDeviceViewController'.") }
        if _R.storyboard.main().deviceListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deviceListViewController' could not be loaded from storyboard 'Main' as 'DeviceListViewController'.") }
        if _R.storyboard.main().deviceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deviceViewController' could not be loaded from storyboard 'Main' as 'DeviceViewController'.") }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
